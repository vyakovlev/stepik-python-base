"""
Большой подвиг 5. (Для закрепления предыдущего материала). На вход программе подается таблица целых чисел (см. пример
ниже) размером N x N элементов (N определяется по входным данным). Необходимо прочитать эти числа и сохранить в виде
двумерного (вложенного) списка N x N элементов. Полученная таблица будет содержать нули и кое-где единицы. С помощью
функции с именем verify, на вход которой подается двумерный список чисел (первый параметр), необходимо проверить,
являются ли единицы изолированными друг от друга, то есть, вокруг каждой единицы должны быть нули.

Рекомендуется следующий алгоритм. В функции verify производить перебор двумерного списка. Для каждого элемента
(списка) со значением 1 вызывать еще одну вспомогательную функцию is_isolate для проверки изолированности единицы. То
есть, функция is_isolate должна возвращать True, если единица изолирована и False в противном случае.

Как только встречается не изолированная единица, функция verify должна возвращать False. Если успешно доходим (по
элементам списка) до конца, то возвращается значение True.

Функцию verify выполнять не нужно, только объявить.

P. S. При реализации функции is_isolate не следует прописывать восемь операторов if. Подумайте, как это можно сделать
красивее (с точки зрения реализации алгоритма).

Тесты: https://github.com/selfedu-rus/test-python-base/tree/main/7/7.5.5

Sample Input:

1 0 0 0 0
0 0 1 0 0
0 0 0 0 0
0 1 0 1 0
0 0 0 0 0
Sample Output:

True

"""

# import sys


def is_isolate(m, y, x):
    if m[x][y] + m[x][y + 1] + m[x + 1][y] + m[x + 1][y + 1] > 1:
        return False
    return True


def verify(matrix):
    m_length = len(matrix[0])
    for i in range(m_length - 1):
        for j in range(m_length - 1):
            if not is_isolate(matrix, y=i, x=j):
                return False
    else:
        return True


# s = sys.stdin.readlines()
# Matrix = [list(map(int, x.strip().split())) for x in s]
# print(verify(Matrix))
# print(verify([[1, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0]]))



